#+TITLE: Leetcode Problem Sets
#+AUTHOR: Civitasv
#+DATE: <2022-12-31>
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+OPTIONS: num:nil

* 剑指 Offer II 004. 只出现一次的数字

[[https://leetcode.cn/problems/WGki4K/][Question Link]]

描述：给你一个整数数组 nums，除某个元素仅出现 一次 外, 其余每个元素都恰出现 三次。请你找出并返回那个只出现了一次的元素。

示例：

#+begin_src text
  输入：nums = [2,2,3,2]
  输出：3
#+end_src

** 解析

因为除某个元素仅出现一次，其余每个元素都恰好出现三次，那么对于出现三次的整数，二进制表示中，对应位的和要么是 0，要么是 3，所以如果对 3 取模不为 0 ，一定是因为出现一次的那个元素，也就是说出现一次的那个元素对应位上为 1。

** Code

#+begin_src cpp
  class Solution {
  public:
    int singleNumber(vector<int>& nums) {
      int ans = 0;
      for (int i = 0; i <= 31; i++) {
        int total = 0;
        for (int num : nums) {
          total += (num >> i) & 1;
        }
        if (total % 3 != 0) {
          ans |= (1 << i);
        }
      }
      return ans;
    }
  };
#+end_src

* 剑指 Offer II 005. 单词长度的最大乘积

[[https://leetcode.cn/problems/WGki4K/][Question Link]]

描述：给定一个字符串数组 words，请计算当两个字符串 words[i] 和 words[j] 不包含相同字符时，它们长度的乘积的最大值。假设字符串中只包含英语的小写字母。如果没有不包含相同字符的一对字符串，返回 0。

示例：

#+begin_src text
  输入: words = ["abcw","baz","foo","bar","fxyz","abcdef"]
  输出: 16 
  解释: 这两个单词为 "abcw", "fxyz"。它们不包含相同字符，且长度的乘积最大。
#+end_src

** 解析

因为字符串中只包含英语的小写字母，也就是a-z，共26个，因此对于每一个字符串，可以使用整数（32位）的每一位记录是否存在对应字母，如果字符串中包含 a，那么整数的第一位应该是1。记录完成之后，如果两个字符串对应的整数取 \textbf{\&} 的结果为0，那么说明两个字符串不包含相同的字符。

** Code

#+begin_src cpp
  class Solution {
  public:
    int maxProduct(vector<string>& words) {
      int length = words.size();
      vector<int> masks(length, 0);

      for (int i = 0; i < length; i++) {
        for (char c : words[i]) {
          masks[i] |= (1 << c - 'a');
        }
      }
      int max_prod = 0;
      for (int i = 0; i < length; i++) {
        for (int j = i + 1; j < length; j++) {
          if ((masks[i] & masks[j]) == 0) {
            max_prod = max(max_prod, (int)(words[i].size() * words[j].size()));
          }
        }
      }
      return max_prod;
    }
  };
#+end_src

* 剑指 Offer II 009. 乘积小于K的子数组

[[https://leetcode.cn/problems/ZVAVXX][Question Link]]

描述：给定一个正整数数组 nums和整数 k ，请找出该数组内乘积小于 k 的连续的子数组的个数。

示例：

#+begin_src text
  输入: nums = [10,5,2,6], k = 100
  输出: 8
  解释: 8 个乘积小于 100 的子数组分别为: [10], [5], [2], [6], [10,5], [5,2], [2,6], [5,2,6]。
  需要注意的是 [10,5,2] 并不是乘积小于100的子数组。
#+end_src

** 解析

滑动窗口典型题目，从前到后处理所有的 $nums[hi]$，使用变量 product 记录当前窗口的乘积，使用 lo 和 hi 分别记录当前窗口的左右端点（[lo, hi]）。

当 product >= k 时，将左端点 lo 右移，同时使 product/=nums[lo]，消除左端点的贡献，这样，对于右端点 hi，我们就可以得到其对应的左端点 lo，从而获得以右端点 hi 为结尾的合法的子数组个数为 hi-lo+1。

** Code

#+begin_src cpp
  class Solution {
  public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
      int lo = 0, hi = 0;
      int product = 1, count = 0;
      while (hi < nums.size()) {
        product *= nums[hi];
        while (lo <= hi && product >= k) {
          product /= nums[lo++];
        }
        count += hi - lo + 1;
        hi++;
      }
      return count;
    }
  };
#+end_src

* 剑指 Offer II 010. 和为K的子数组

[[https://leetcode.cn/problems/QTMn0o/?envType=study-plan&id=lcof-ii&plan=lcof&plan_progress=yc5zsnt][Question Link]]


描述：给定一个整数数组和一个整数 k ，请找到该数组中和为 k 的连续子数组的个数。

示例：

#+begin_src text
  输入:nums = [1,1,1], k = 2
  输出: 2
  解释: 此题 [1,1] 与 [1,1] 为两种不同的情况
#+end_src

提示：

1. $1 <= nums.length <= 2 * 10^4$
2. $-1000 <= nums[i] <= 1000$
3. $-10^7 <= k <= 10^7$

** 解析

前缀和典型题目，由于数组中的值可能存在负值，无法使用滑动窗口方法，因为滑动窗口方法在判断时采用的是 ~while(sum>=k)~ 。

对于 $a=\sum_{i}^{j} nums$ ，记录 $sum=\sum_{0}^{j} nums$ ，要想使 ~a=k~ ，必须

$$\sum_{0}^{i-1} nums=sum-k$$

所以，使用哈希表 ~unordered_map~ ，记录前缀和以及前缀和出现的次数，键表示前缀和，值表示该和出现的次数。对于下标 ~j~ ，获得 $\sum_{0}^{i-1}nums=sum-k$ 的 ~i~ 的个数即可。

** Code

#+begin_src cpp
  class Solution {
  public:
    int subarraySum(vector<int>& nums, int k) {
      int sum = 0, count = 0;
      unordered_map<int, int> mp;  // key: 和 value: 该和出现的次数
      mp[0] = 1;

      for (int j=0; j < nums.size(); j++) {
        sum += nums[j];
        if (mp.find(sum - k) != mp.end()) {
          count += mp[sum - k];
        }

        mp[sum]++;
      }
      return count;
    }
  };
#+end_src

* 剑指 Offer II 013. 二维子矩阵的和

[[https://leetcode.cn/problems/O4NDxx/?envType=study-plan&id=lcof-ii&plan=lcof&plan_progress=yc5zsnt][Question Link]]

描述：给定一个二维矩阵 matrix，以下类型的多个请求：

- 计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2,  col2) 。

实现 NumMatrix 类：

- NumMatrix(int[][] matrix) 给定整数矩阵 matrix 进行初始化

- int sumRegion(int row1, int col1, int row2, int col2) 返回左上角 (row1, col1)、右下角 (row2, col2) 的子矩阵的元素总和。

提示：

1. m == matrix.length
2. n == matrix[i].length
3. 1 <= m, n <= 200
4. -105 <= matrix[i][j] <= 105
5. 0 <= row1 <= row2 < m
6. 0 <= col1 <= col2 < n
7. 最多调用 104 次 sumRegion 方法

** 解析

[row1, col1] 到 [row2, col2] 子矩阵的和等于:

sum(row2, col2) - sum(row2, col1-1) - sum(row1-1, col2) + sum(row1, col1)。

这样，只需要计算 sum，可以使用前缀和，即 sum(i, j) = sum(i-1,j)+当前行的前缀和。

** Code

#+begin_src cpp
  class NumMatrix {
  public:
    NumMatrix(vector<vector<int>>& matrix)
      : pre_sum(matrix.size() + 1, vector<int>(matrix[0].size() + 1, 0)) {
      int m = matrix.size(), n = matrix[0].size();
      for (int i = 0; i < m; i++) {
        int sum = 0;
        for (int j = 0; j < n; j++) {
          sum += matrix[i][j];
          pre_sum[i + 1][j + 1] = pre_sum[i][j + 1] + sum;
        }
      }
    }

    int sumRegion(int row1, int col1, int row2, int col2) {
      return pre_sum[row2 + 1][col2 + 1] + pre_sum[row1][col1] -
        pre_sum[row2 + 1][col1] - pre_sum[row1][col2 + 1];
    }

  private:
    vector<vector<int>> pre_sum;
  };
#+end_src

